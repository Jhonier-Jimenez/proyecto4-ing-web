generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bug {
  id           String            @id @default(cuid())
  prioridad    Enum_PrioridadBug
  estado       Enum_EstadoBug
  descripcion  String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  proyectoId   String
  usuarioId    String
  carga        String?
  proyecto     Proyecto          @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  usuario      User?             @relation(fields: [usuarioId], references: [id])
  comentarios  Comentario[]
  isFinalizado Boolean           @default(false)
}

model Comentario {
  id              String      @id @default(cuid())
  textoComentario String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  bugId           String
  usuarioId       String
  Bug             Bug         @relation(fields: [bugId], references: [id], onDelete: Cascade)
  Usuario         User        @relation(fields: [usuarioId], references: [id])
  Respuestas      Respuesta[]
}

model Proyecto {
  id          String   @id @default(cuid())
  nombre      String   @unique
  descripcion String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bugs        Bug[]
  usuarios    User[]
}

model Respuesta {
  id             String     @id @default(cuid())
  textoRespuesta String
  usuarioId      String
  comentarioId   String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Comentario     Comentario @relation(fields: [comentarioId], references: [id], onDelete: Cascade)
  Usuario        User       @relation(fields: [usuarioId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  usuarioId     String
  accounts      Account[]
  sessions      Session[]

  bugs        Bug[]
  comentarios Comentario[]
  respuestas  Respuesta[]
  proyectos   Proyecto[]

  role Enum_Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Enum_Role {
  Administrador
  Cliente
  Desarrrollador
}

enum Enum_PrioridadBug {
  Urgente
  Alta
  Media
  Baja
}

enum Enum_EstadoBug {
  NoIniciado
  Iniciado
  EnPruebas
  Finalizado
}
